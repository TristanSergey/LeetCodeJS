// Вам дана доска с целочисленной матрицей размера length x length, 
// где ячейки помечены от 1 до n2 в стиле бустрофедона, 
// начиная с нижнего левого угла доски(т.е.доска[length - 1][0]) 
// и меняя направление в каждой строке.
// Вы начинаете с клетки 1 доски.В каждом ходе, начиная с квадрата, делайте следующее:
// Далее выберите целевой квадрат с меткой в ​​диапазоне[curr + 1, min(curr + 6, n2)].
// Этот выбор имитирует результат стандартного 6 - гранного броска кубика: 
// т.е.всегда существует не более 6 пунктов назначения, независимо от размера игрового поля.
// Если рядом есть змея или лестница, вы должны перейти к месту назначения этой змеи или лестницы.
// В противном случае вы переходите к следующему.
// Игра заканчивается, когда вы достигаете квадрата n2.
// На квадрате доски в строке r и столбце c есть змея или лестница, 
// если board[r][c] != -1. Пункт назначения этой змеи или лестницы — доска[r][c].
// В квадратах 1 и n2 нет ни змеи, ни лестницы.
// Обратите внимание, что вы берете змею или лестницу не более одного раза за ход.
// Если пунктом назначения змеи или лестницы является начало другой змеи или лестницы, 
// вы не следуете за следующей змейкой или лестницей.
// Например, предположим, что доска — это[[-1, 4], [-1, 3]], и при первом ходе ваша 
// клетка назначения — 2. Вы следуете по лестнице до клетки 3, 
// но не следуете по следующей лестнице.до 4.
// Возвращает наименьшее количество ходов, необходимое для достижения квадрата n2.
// Если дойти до квадрата невозможно, верните - 1.
// 909


board = [[-1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1], [-1, 35, -1, -1, 13, -1], [-1, -1, -1, -1, -1, -1], [-1, 15, -1, -1, -1, -1]]

var snakesAndLadders = function (board) {

    let length = board.length;
    let set = new Set();
    let getPos = (pos) => {
        let row = Math.floor((pos - 1) / length)
        let col = (pos - 1) % length
        col = row % 2 == 1 ? length - 1 - col : col;
        row = length - 1 - row;
        return [row, col]
    }
    let queue = [[1, 0]]
    while (queue.length > 0) {
        [pos, move] = queue.shift();
        for (let i = 1; i < 7; i++) {
            let newPos = i + pos;
            let [r, c] = getPos(newPos);
            if (board[r][c] != -1) newPos = board[r][c]
            if (newPos == length * length) return move + 1;
            if (!set.has(newPos)) {
                set.add(newPos)
                queue.push([newPos, move + 1])
            }
        }
    }
    return -1

};


console.log(snakesAndLadders(board))