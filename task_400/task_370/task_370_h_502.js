// Предположим, LeetCode скоро начнет IPO.Чтобы продать свои акции
// венчурному капиталу по хорошей цене, LeetCode хотела бы поработать
// над некоторыми проектами по увеличению своего капитала перед IPO.
// Поскольку у компании ограниченные ресурсы, она может завершить не
// более k отдельных проектов до IPO.Помогите LeetCode разработать
// лучший способ максимизировать общий капитал после завершения
// не более k различных проектов.
// Вам даны n проектов, где i - й проект имеет чистую profits[i]
//  и для его запуска необходим минимальный capital[i].
// Изначально у вас есть капитал.Когда вы завершите проект,
// вы получите чистую прибыль, которая будет добавлена к вашему общему капиталу.
// Выберите список не более чем k различных проектов из заданных проектов,
// чтобы максимизировать свой окончательный капитал,
// и верните окончательный максимальный капитал.
// Ответ гарантированно умещается в 32 - битное целое число со знаком.
// 502

let k = 2;
let w = 0;
let profits = [1, 2, 3];
let capital = [0, 1, 1];

let findMaximizedCapital = function (k, w, profits, capital) {
    let arr = [];
    for (let i = 0; i < profits.length; i++) arr.push([profits[i], capital[i]]);
    arr.sort((a, b) => a[1] - b[1]);

    let queue = new MaxPriorityQueue();
    let temp = 0;
    while (k > 0) {
        while (temp < arr.length && arr[temp][1] <= w) {
            queue.enqueue(temp, arr[temp][0]);
            temp++;
        }

        if (queue.size() === 0) break;

        w += queue.dequeue().priority;
        k--;
    }

    return w;
};

console.log(findMaximizedCapital(k, w, profits, capital));
