/**
Вам даны две двоичные матрицы размером m x n,grid1 и grid2, содержащие только 0 (представляющие воду) и 1 (представляющие землю). Остров — это группа единиц, соединенных в четырех направлениях (горизонтально или вертикально). Любые ячейки за пределами сетки считаются ячейками воды.
Остров в сетке 2 считается подостровом, если в сетке 1 есть остров, содержащий все ячейки, составляющие этот остров в сетке 2.
Возвращает количество островов в таблице Grid2, которые считаются подостровами.
 */

let grid1 = [
    [1, 1, 1, 0, 0],
    [0, 1, 1, 1, 1],
    [0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0],
    [1, 1, 0, 1, 1],
];
let grid2 = [
    [1, 1, 1, 0, 0],
    [0, 0, 1, 1, 1],
    [0, 1, 0, 0, 0],
    [1, 0, 1, 1, 0],
    [0, 1, 0, 1, 0],
];

let countSubIslands = function (grid1, grid2) {
    const m = grid2.length;
    const n = grid2[0].length;

    function dfs(i, j) {
        // Если вышли за границы или наткнулись на воду, останавливаем DFS
        if (i < 0 || i >= m || j < 0 || j >= n || grid2[i][j] === 0) {
            return true;
        }

        // Если в grid1 нет земли, но есть в grid2, то это не подостров
        if (grid1[i][j] === 0) {
            return false;
        }

        // Помечаем клетку в grid2 как посещенную (ставим 0)
        grid2[i][j] = 0;

        let isSubIsland = true;
        // Рекурсивно запускаем DFS в четырех направлениях
        isSubIsland &= dfs(i - 1, j);
        isSubIsland &= dfs(i + 1, j);
        isSubIsland &= dfs(i, j - 1);
        isSubIsland &= dfs(i, j + 1);

        return isSubIsland;
    }

    let subIslandsCnt = 0;

    // Обходим все ячейки grid2
    for (let i = 0; i < m; i++) {
        for (let j = 0; j < n; j++) {
            // Если нашли часть острова в grid2, проверяем его на подостров
            if (grid2[i][j] === 1 && dfs(i, j)) {
                subIslandsCnt++;
            }
        }
    }

    return subIslandsCnt;
};

console.log(countSubIslands(grid1, grid2));
