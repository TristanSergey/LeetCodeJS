// В городе проживают n человек, отмеченных цифрами от 1 до n.
// Ходят слухи, что один из этих людей тайно является городским судьей.
// Если городской судья существует, то:
// Городской судья никому не доверяет.
//     Все(кроме городского судьи) доверяют городскому судье.
// Существует ровно один человек, который удовлетворяет свойствам 1 и 2.
// Вам дан массив доверия, где доверие[i] = [ai, bi] означает, что человек 
// с меткой ai доверяет человеку с меткой bi.Если доверительные отношения 
// не существуют в доверительном массиве, то такие доверительные отношения не существуют.
// Верните метку городского судьи, если городской судья существует и его можно 
// идентифицировать, или верните - 1 в противном случае.

// 997

n = 3, trust = [[1, 3], [2, 3]];
// n = 2, trust = [[1, 2]]
n = 3, trust = [[1, 3], [2, 3], [3, 1]]
// n = 4, trust = [[1, 3], [1, 4], [2, 3], [2, 4], [4, 3]]

var findJudge = function (n, trust) {

    // Создаем массив для подсчета доверия
    const count = Array.from({ length: n + 1 }).fill(0);

    // Проходим по массиву доверия и обновляем подсчеты
    for (const [a, b] of trust) {
        count[a]--; // Человек a доверяет, уменьшаем счетчик
        count[b]++; // Человек b получает доверие, увеличиваем счетчик
    }

    // Проверяем условия на городского судью
    for (let i = 1; i <= n; i++) {
        if (count[i] === n - 1) {
            return i; // Найден городской судья
        }
    }

    return -1; // Городской судья не найден

};


console.log(findJudge(n, trust))











// const hashJudge = new Map();
// const hashCitizen = new Map();

// for (let i = 0; i < trust.length; i++) {
//     hashJudge.set(trust[i][1], (hashJudge.get(trust[i][1]) ?? 0) + 1);
// }

// for (const [key, value] of hashJudge.entries()) {

//     if (value === n - 1) return key;

// }

// console.log(hashJudge)
// console.log(hashJudge.size)


// // for (let i = 0; i < trust.length; i++) {
// //     hashCitizen.set(trust[i][0], (hashCitizen.get(trust[i][0]) ?? 0) + 1);
// // }

// // console.log(hashCitizen)
// // if (hashCitizen.size !== n - 1) return -1;


// return -1;