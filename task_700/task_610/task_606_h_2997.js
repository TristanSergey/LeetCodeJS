/*
Вам дан целочисленный массив nums с нулевым индексом и положительное целое число k.

Вы можете применить следующую операцию к массиву любое количество раз:

Выберите любой элемент массива и немного переверните его двоичное представление. Немного перевернуть бит означает изменить 0 на 1 или наоборот.
Возвращает минимальное количество операций, необходимое для выполнения побитового исключающего ИЛИ всех элементов конечного массива, равных k.

Обратите внимание, что вы можете перевернуть ведущие нули в двоичном представлении элементов. Например, для числа (101)2 вы можете перевернуть четвертый бит и получить (1101)2.
*/

// 2997

let nums = [2, 1, 3, 4];
let k = 1;

let minOperations = function (nums, k) {
    let temp = 0;
    // Вычисляем побитовый XOR всех элементов массива
    for (let num of nums) {
        temp ^= num;
    }
    // Вычисляем количество установленных бит в результате операции XOR между temp и k
    return bitCount(temp ^ k);

    function bitCount(num) {
        let cnt = 0;
        while (num !== 0) {
            cnt += num & 1;
            num >>= 1;
        }
        return cnt;
    }
};

console.log(minOperations(nums, k));
