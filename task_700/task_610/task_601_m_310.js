/*
Дерево — это неориентированный граф, в котором любые две вершины соединены ровно одним путем. Другими словами, любой связный граф без простых циклов является деревом.
Учитывая дерево из n узлов, помеченных от 0 до n - 1, и массив из n - 1 ребер, где ребра [i] = [ai, bi] указывают на то, что между двумя узлами ai и bi в дереве существует ненаправленное ребро. , вы можете выбрать любой узел дерева в качестве корня. Когда вы выбираете узел x в качестве корня, результирующее дерево имеет высоту h. Среди всех возможных корневых деревьев деревья с минимальной высотой (т.е. min(h)) называются деревьями минимальной высоты (MHT).
Возвращает список корневых меток всех MHT. Вы можете вернуть ответ в любом порядке.
Высота дерева с корнями — это количество ребер на самом длинном нисходящем пути между корнем и листом.
*/
// 310

let n = 4;

let edges = [
    [1, 0],
    [1, 2],
    [1, 3],
];

let findMinHeightTrees = function (n, edges) {
    if (n === 1) return [0]; // Если только одна вершина, она и будет центром
    console.log('fsalkdjfa');
    const adjList = new Array(n).fill(null).map(() => []);

    // Создаем список смежности для каждой вершины
    for (const [a, b] of edges) {
        adjList[a].push(b);
        adjList[b].push(a);
    }

    let leaves = [];

    // Ищем все листья (вершины с одним смежным узлом)
    for (let i = 0; i < n; i++) {
        if (adjList[i].length === 1) {
            leaves.push(i);
        }
    }

    // Повторяем процесс, пока не останется 1 или 2 вершины
    while (n > 2) {
        const newLeaves = [];

        for (const leaf of leaves) {
            const neighbor = adjList[leaf][0];
            // Удаляем связь с текущим листом
            adjList[neighbor] = adjList[neighbor].filter(node => node !== leaf);
            // Если сосед стал листом, добавляем его в список
            if (adjList[neighbor].length === 1) {
                newLeaves.push(neighbor);
            }
        }

        n -= leaves.length; // Уменьшаем количество вершин
        leaves = newLeaves; // Обновляем список листьев
    }

    return leaves;
};

console.log(findMinHeightTrees(n, edges));
