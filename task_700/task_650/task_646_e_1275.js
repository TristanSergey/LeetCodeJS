/**
В крестики-нолики играют два игрока А и В на сетке размером 3 х 3. Правила игры в крестики-нолики таковы::
Игроки по очереди расставляют символы на пустые клетки.
Первый игрок A всегда ставит символы "X", в то время как второй игрок B всегда ставит символы "O".
Символы "X" и "O" всегда ставятся на пустые квадраты, но никогда на заполненные.
Игра заканчивается, когда три одинаковых (непустых) символа заполняют любую строку, столбец или диагональ.
Игра также заканчивается, если все клетки непустые.
По окончании игры больше ходов быть не может.
Задан двумерный целочисленный массив ходов, где ходы[i] = [rowi, coli] указывают на то, что i-й ход будет сыгран по сетке[rowi][coli]. верните победителя игры, если он существует (A или B). В случае, если игра закончится вничью, верните "Ничья". Если в игре еще есть ходы, верните "В ожидании".
Вы можете предположить, что ходы действительны (т.е. соответствуют правилам игры в крестики-нолики), сетка изначально пуста, и A будет играть первым. 
 */

let moves = [
    [0, 0],
    [2, 0],
    [1, 1],
    [2, 1],
    [2, 2],
];
moves = [
    [0, 0],
    [1, 1],
    [2, 0],
    [1, 0],
    [1, 2],
    [2, 1],
    [0, 1],
    [0, 2],
    [2, 2],
];
let tictactoe = function (moves) {
    const board = Array.from({ length: 3 }).map(() =>
        Array.from({ length: 3 }).fill(-1),
    );

    function createBoard() {
        for (let i = 0; i < moves.length; i++) {
            if (i % 2 === 0) {
                board[moves[i][0]][moves[i][1]] = 'X';
            } else {
                board[moves[i][0]][moves[i][1]] = 'O';
            }
        }
        return board;
    }
    createBoard();

    function checkWin(board) {
        for (let i = 0; i < 3; i++) {
            if (
                (board[i][0] === board[i][1] &&
                    board[i][1] === board[i][2] &&
                    board[i][0] === 'X') ||
                (board[0][i] === board[1][i] &&
                    board[1][i] === board[2][i] &&
                    board[2][i] === 'X') ||
                (board[0][0] === board[1][1] &&
                    board[0][0] === board[2][2] &&
                    board[0][0] === 'X') ||
                (board[0][2] === board[1][1] &&
                    board[0][2] === board[2][0] &&
                    board[0][2] === 'X')
            ) {
                return 'A';
            }
            if (
                (board[i][0] === board[i][1] &&
                    board[i][1] === board[i][2] &&
                    board[i][0] === 'O') ||
                (board[0][i] === board[1][i] &&
                    board[1][i] === board[2][i] &&
                    board[2][i] === 'O') ||
                (board[0][0] === board[1][1] &&
                    board[0][0] === board[2][2] &&
                    board[0][0] === 'O') ||
                (board[0][2] === board[1][1] &&
                    board[0][2] === board[2][0] &&
                    board[0][2] === 'O')
            ) {
                return 'B';
            }
        }

        if (moves.length < 9) {
            return 'PENDING';
        } else {
            return 'DRAW';
        }
    }

    return checkWin(createBoard());
};

console.log(tictactoe(moves));
